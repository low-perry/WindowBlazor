@page "/window/create"
@page "/window/edit/{id:int}"

@inject IWindowRepository _windowRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Window</h3>
    <div class="col-10">
        @if (IsLoading)
        {
            //TODO: Add spinner
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm Model="Window" OnValidSubmit="UpsertWindow">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="form-group">
                    <label for="Name">Name</label>
                    <InputText class="form-control" id="Name" @bind-Value="Window.Name"></InputText>
                    <ValidationMessage For="@(() => Window.Name)" />
                </div>
                <div class="form-group">
                    <label for="QuantityOfWindows">Quantity of windows</label>
                    <InputNumber class="form-control" id="QuantityOfWindows" @bind-Value="Window.QuantityOfWindows"></InputNumber>
                    <ValidationMessage For="@(() => Window.QuantityOfWindows)" />
                </div>
                <div class="form-group">
                    <label for="TotalSubElements">Total Sub Elements</label>
                    <InputNumber class="form-control" id="TotalSubElements" @bind-Value="Window.TotalSubElements"></InputNumber>
                    <ValidationMessage For="@(() => Window.TotalSubElements)" />
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="window" class="btn btn-secondary">Back to Window List</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    private WindowDTO Window { get; set; } = new WindowDTO();
    private string Title { get; set; } = "Create";

    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            //create
            IsLoading = false;
        }
        else
        {
            //edit
            Title = "Update";
            await Task.Run(LoadWindow);
        }
    }

    private async Task LoadWindow()
    {
        Window = await _windowRepository.Get(Id);
        IsLoading = false;
    }

    private async Task UpsertWindow()
    {
        if (Id != 0)
        {
            //edit
            await _windowRepository.Update(Window);
            
        }
        else
        {
            //create
           await _windowRepository.Create(Window);
            
        }
        _navigationManager.NavigateTo("window");
    }
}
