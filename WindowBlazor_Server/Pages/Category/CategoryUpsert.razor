@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>
    <div class="col-10">
        @if (IsLoading)
        {
            //TODO: Add spinner
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="form-group">
                    <label for="Name">Name</label>
                    <InputText class="form-control" id="Name" @bind-Value="Category.Name"></InputText>
                    <ValidationMessage For="@(() => Category.Name)" />
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to List</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    private CategoryDTO Category { get; set; } = new CategoryDTO();
    private string Title { get; set; } = "Create";

    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            //create
            IsLoading = false;
        }
        else
        {
            //edit
            Title = "Update";
            await Task.Run(LoadCategory);
        }
    }

    private async Task LoadCategory()
    {
        Category = await _categoryRepository.Get(Id);
        IsLoading = false;
    }

    private async Task UpsertCategory()
    {
        if (Id != 0)
        {
            //edit
            await _categoryRepository.Update(Category);
            
        }
        else
        {
            //create
           await _categoryRepository.Create(Category);
            
        }
        _navigationManager.NavigateTo("category");
    }
}
