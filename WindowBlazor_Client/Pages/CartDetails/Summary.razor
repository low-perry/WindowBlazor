@page "/summary"
@inject ILocalStorageService _localStorage
@inject IWindowService _windowService
@inject IJSRuntime _jsRuntime
@inject IOrderService _orderService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
 <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>
                @foreach(var window in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">


                        <div class="col-5 col-md-5 ">
                            <span class="">Window : @window.WindowName </span><br />
                            <span class="pt-1">TotalSubElemements:@window.Window.TotalSubElements</span><br />
                            <span class="pt-1">Count : @window.Count</span><br />

                        </div>

                    </div>
                }
            
                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Total Count : <span class="text-secondary">@Order.OrderHeader.OrderTotal</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" OnValidSubmit="HandleCheckout">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="Order.OrderHeader.Name" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Name"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.OrderHeader.PhoneNumber" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PhoneNumber"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHeader.Email" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Email"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="Order.OrderHeader.StreetAddress" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.StreetAddress"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="Order.OrderHeader.City" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.City"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.OrderHeader.State" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.State"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.OrderHeader.PostalCode" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PostalCode"></ValidationMessage>
                    </div>


                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
 }

@code {
    public bool IsProcessing { get; set; } = false;
    private OrderDTO Order { get; set; } = null;
    private IEnumerable<WindowDTO> Windows { get; set; }
    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
        Windows = await _windowService.GetAll();
        Order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    Status = SD.Status_Pending
                },
                OrderDetails = new List<OrderDetailDTO>()
            };
        foreach (var item in cart)
        {
            WindowDTO window = Windows.FirstOrDefault(u => u.Id == item.WindowId);


            OrderDetailDTO orderDetailDTO = new()
                {
                    WindowId = item.WindowId,
                    Count = item.Count,

                    WindowName = window.Name,
                    Window = window
                };
            Order.OrderDetails.Add(orderDetailDTO);
            Order.OrderHeader.OrderTotal += (item.Count);
        }
        if (await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
        {
            var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            Order.OrderHeader.UserId = userInfo.Id;
            Order.OrderHeader.Name = userInfo.Name;
            Order.OrderHeader.Email = userInfo.Email;
            Order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;

        }



        IsProcessing = false;
    }
    private async Task HandleCheckout()
    {
        try
        {
            //IsProcessing = true;

            var orderProcessingDTO = new OrderProcessingDTO()
                {
                    Order = Order
        };
            var orderDTOSaved = await _orderService.Create(orderProcessingDTO);

            
        }
        catch (Exception e)
        {
            await _jsRuntime.ToastrError(e.Message);
        }
    }
}
